syntax = "proto3";
// Update to proto 3

package deepvan;

option optimize_for = LITE_RUNTIME;

// For better compatibility,
// the deepvan.proto is refered from tensorflow and caffe2.

enum DataType {
  DT_INVALID = 0;
  DT_FLOAT = 1;
  DT_UINT8 = 2;
  DT_HALF = 3;
  DT_INT32 = 4;
  DT_INT8 = 5;
}

enum MemoryType {
  CPU_BUFFER = 0;
  GPU_BUFFER = 1;
  GPU_IMAGE = 2;
}

enum PatternStorageType {
  PT_LOOSE = 0;
  PT_TIGHT = 1;
}

enum PruningType {
  DENSE = 0;
  CSR = 1;
  PATTERN = 2;
  BLOCK = 3;
  COLUMN = 4;
}

message TuningProto {
  repeated uint32 lws = 1;
  repeated uint32 gws = 2;
}

message PatternData {
  PatternStorageType pst = 1;
  //if output channel less than 256, choose order_data_byte 
  repeated int32 order_data       = 2 [packed = true];
  int32 order_size       = 3;
  //if input channel less than 256, choose byte, 
  //but number_data is better(save computation)
  repeated int32 number_data      = 4 [packed = true];
  int32 number_size      = 5;
  
  //using bool in CPU mode, but GPU don't support bool
  repeated int32 style_data       = 6 [packed = true];
  int32 style_size       = 7;
  
  //if input channel(pruned) less than 256, choose order_data_byte
  repeated int32 gap_data         = 8 [packed = true];
  int32 gap_size         = 9;
  
  //if input channel less than 256, choose order_data_byte
  repeated int32 index_data       = 10[packed = true];
  int32 index_size       = 11;
  
  repeated int32 pattern_shape    = 12;
  int32 offset           = 13;
  int32 data_size        = 14;
}

message ColumnData {
  // for column pruning data
  repeated int32 rows_mask = 1;
  int32 rows_nnz = 2;
  repeated int32 cols_mask = 3;
  int32 cols_nnz = 4;
  repeated int32 rows_zeros = 5;
}

message BlockData {
  // for block pruning data
  repeated int32 block_count = 1;
  repeated int32 offset_data = 2;
  repeated int32 order_data  = 3;
  repeated int32 empty_data  = 4;
  repeated int32 stride_data = 5;
  repeated int32 column_data = 6;
}

message CSRData {
  repeated int32 row_ptr = 1;
  repeated int32 col_ptr = 2;
}

message TensorProto {
  repeated int64 dims = 1;
  DataType data_type = 2 ;
  repeated float float_data = 3 [packed = true];
  repeated int32 int32_data = 4 [packed = true];
  string name = 5;
  int64 offset = 6;
  int64 data_size = 7;
  float scale = 8;
  int32 zero_point = 9;
  float minval = 10;
  float maxval = 11;
  bool quantized = 12;
  
  // for sparse weight
  bool sparsed_weight = 13;
  repeated int32 row_ptr = 14 [packed = true];
  int64 row_ptr_data_size = 15;
  repeated int32 col_index = 16 [packed = true];
  int64 col_index_data_size = 17;
  bool ternary = 18;
  repeated uint32 style_data = 19;
  
  PruningType pruning_type = 20;

  // for pattern pruning data  
  PatternData pattern_data = 21;
  bool pattern_weight = 22;
  
  // for column pruning data
  ColumnData column_data = 23;

  uint32 node_id = 100;
}

message ArgumentProto {
  string name = 1;
  float f = 2;
  int64 i = 3;
  bytes s = 4;
  repeated float floats = 5;
  repeated int64 ints = 6;
}

// for hexagon 
message NodeInput {
  int32 node_id = 1;
  int32 output_port = 2;
}

message OutputShape {
  repeated int64 dims = 1;
}

message QuantizeActivationInfo {
  float scale = 1;
  int32 zero_point = 2;
  float minval = 3;  // hexagon uses min/max
  float maxval = 4;
}

message OperatorProto {
  repeated string input = 1;
  repeated string output = 2;
  string name = 3;
  string type = 4;
  int32 device_type = 5;
  repeated ArgumentProto arg = 6;
  repeated OutputShape output_shape = 7;
  repeated DataType output_type = 8;
  repeated QuantizeActivationInfo quantize_info = 9;
  repeated int32 mem_id = 10;
  repeated uint32 ch_index = 13;  
  PruningType pruning_type = 14;
  int64 macs = 15;
  TuningProto tuning_proto = 17;

  // for hexagon 
  uint32 node_id = 100;
  uint32 op_id = 101;
  uint32 padding = 102;
  repeated NodeInput node_input = 103;
  repeated int32 out_max_byte_size = 104;  // only support 32-bit len
}

// for hexagon 
message InputOutputInfo {
  string name = 1;
  int32 node_id = 2;
  repeated int32 dims = 3;
  int32 max_byte_size = 4;  // only support 32-bit len
  DataType data_type = 5;
  int32 data_format = 6;
  float scale = 7;
  int32 zero_point = 8;
}

message NetProto {
  repeated OperatorProto op = 1;
  repeated ArgumentProto arg = 2;
  repeated TensorProto tensors = 3;
  uint64 other_data_size = 4;

  // for hexagon 
  repeated InputOutputInfo input_info = 100;
  repeated InputOutputInfo output_info = 101;
}
